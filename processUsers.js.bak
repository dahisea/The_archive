const fs = require('fs');
const axios = require('axios');
const path = require('path');

const configDir = "./config/_default";
const defaultLang = "zh-tw";
const usersFolderPath = "./content/tomodachi/";

var targetLangs = ["zh-SG"];

const configFiles = fs.readdirSync(configDir);
configFiles.forEach(file => {
    if (file.indexOf("languages.") > -1) {
        var lang = file.split(".")[1];
        if (lang != defaultLang) {
            targetLangs.push(lang);
        }
    }
});

const indexFiles = fs.readdirSync(usersFolderPath);
for (var i in targetLangs) {
    var targetFile = '_index.' + targetLangs[i] + '.md';
    if (indexFiles.indexOf(targetFile) == -1) {
        fs.copyFileSync(usersFolderPath + '_index.md', usersFolderPath + targetFile);
    }
}

let rawdata = fs.readFileSync(usersFolderPath + 'users.json');
let users = JSON.parse(rawdata);
let userDict = {};
for (var i in users) {
    userDict[users[i].title.replaceAll("/", "-")] = true;
}

const files = fs.readdirSync(usersFolderPath);

for (file in files) {
    let stats = fs.statSync(usersFolderPath + files[file]);
    if (files[file] != 'users.json' && files[file].indexOf("_index.") == -1) {
        if (stats.isDirectory()) {
            if (!userDict[files[file].replaceAll("/", "-")]) {
                console.log('deleting: ', files[file]);
                fs.rmdirSync(usersFolderPath + files[file], { recursive: true, force: true });
            }
        } else {
            console.log('deleting: ', files[file]);
            fs.unlinkSync(usersFolderPath + files[file]);
        }
    }
}

async function downloadImage(url, dest) {
    const writer = fs.createWriteStream(dest);
    const response = await axios({
        url,
        method: 'GET',
        responseType: 'stream'
    });
    response.data.pipe(writer);
    return new Promise((resolve, reject) => {
        writer.on('finish', resolve);
        writer.on('error', reject);
    });
}

async function processUsers() {
    for (var i in users) {
        var userMDFile = `---
title: "${users[i].title}"
tags: [${users[i].tags}]
externalUrl: "${users[i].url}"
weight: ${i+1}
showDate: false
showAuthor: false
showReadingTime: false
showEdit: false
showLikes: false
showViews: false
layoutBackgroundHeaderSpace: false
---\n`;

        var dir = path.join(usersFolderPath, users[i].title.replaceAll("/", "-"));

        if (!fs.existsSync(dir)) {
            fs.mkdirSync(dir);
            console.log(i, users[i].title);
            fs.writeFileSync(path.join(dir, 'index.md'), userMDFile);
            // Create files for other languages with the same content
            for (var j in targetLangs) {
                fs.writeFileSync(path.join(dir, 'index.' + targetLangs[j] + '.md'), userMDFile);
            }
            // Download and save the image
            await downloadImage(users[i].source, path.join(dir, 'feature.jpg'));
        }
    }
}

processUsers().catch(console.error);